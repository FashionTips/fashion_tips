<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns="http://www.springframework.org/schema/security"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">

    <http>
        <http-basic entry-point-ref="entryPoint"/>

        <!-- Permit OPTIONS request for all to support cors -->
        <intercept-url pattern="/**" method="OPTIONS" access="permitAll"/>

        <!-- Permit unauth access to images -->
        <intercept-url pattern="/images/**" method="GET" access="permitAll"/>

        <!-- Permit posts GET request for unauthorized users.-->
        <intercept-url pattern="/posts/**" method="GET" access="permitAll"/>

        <!-- Let everybody can register a new user and check, whether the login is available -->
        <intercept-url pattern="/users" method="POST" access="permitAll"/>
        <intercept-url pattern="/users/available" method="GET" access="permitAll"/>

        <!-- Only authenticated users can access the api methods -->
        <intercept-url pattern="/**" access="isAuthenticated()"/>
        <logout success-handler-ref="logoutSuccessHandler"/>
        <csrf disabled="true"/>
    </http>

    <!-- Entry point returns 401 UNAUTHORIZED to start security negotiations -->
    <beans:bean id="entryPoint" class="org.springframework.security.web.authentication.HttpStatusEntryPoint">
        <beans:constructor-arg name="httpStatus" value="UNAUTHORIZED"/>
    </beans:bean>

    <!-- Logout Success Handler, which respond with http status code OK (200) -->
    <beans:bean id="logoutSuccessHandler"
                class="org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler"/>

    <authentication-manager>
        <authentication-provider>
            <password-encoder hash="bcrypt"/>
            <jdbc-user-service
                    data-source-ref="dataSource"
                    users-by-username-query="select login, password, 1 from users where login = ?"
                    authorities-by-username-query="select users.login, roles.name from users
                                                   join user_role on users.id = user_role.user_id join roles on user_role.role_id = roles.id
                                                   where login = ?"/>
        </authentication-provider>
    </authentication-manager>
</beans:beans>